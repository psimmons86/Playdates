import Foundation
import FirebaseFirestore
import FirebaseFirestoreSwift // Import this for @DocumentID

struct ChatMessage: Identifiable, Codable, Equatable {
    @DocumentID var id: String? // Needs to be var and optional for Firestore decoding
    let text: String
    let senderID: String
    let recipientID: String
    let timestamp: Date
    let imageURL: String?
    var isRead: Bool = false // Provide default value

    // Initializer for creating NEW messages before sending to Firestore
    // Keep this initializer for manual message creation if needed.
    // Note: isRead defaults to false here.
    init(senderID: String, recipientID: String, text: String, timestamp: Date = Date(), imageURL: String? = nil, isRead: Bool = false) {
        self.id = nil // ID is generated by Firestore
        self.text = text
        self.senderID = senderID
        self.recipientID = recipientID
        self.timestamp = timestamp
        self.imageURL = imageURL
        self.isRead = isRead
    }

    // Removed custom Codable implementation (init(from:), encode(to:), CodingKeys)
    // Relying on synthesized Codable conformance + @DocumentID

    // Equatable - Compare based on ID if available
    static func == (lhs: ChatMessage, rhs: ChatMessage) -> Bool {
        if let lhsId = lhs.id, let rhsId = rhs.id {
            return lhsId == rhsId
        }
        // Fallback if IDs are nil (should be rare after fetch)
        return lhs.senderID == rhs.senderID && lhs.timestamp == rhs.timestamp && lhs.text == rhs.text
    }
}
